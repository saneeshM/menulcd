#include <LiquidCrystal.h>
#include <EEPROM.h>

#define LCD_RS 5
#define LCD_EN 18
#define LCD_D4 19
#define LCD_D5 21
#define LCD_D6 22
#define LCD_D7 23

LiquidCrystal lcd(LCD_RS, LCD_EN, LCD_D4, LCD_D5, LCD_D6, LCD_D7);

const int BUTTON_PINS[] = {32, 25, 33, 35};
const int NUM_BUTTONS = sizeof(BUTTON_PINS) / sizeof(BUTTON_PINS[0]);

bool buttonState[NUM_BUTTONS];
bool lastButtonState[NUM_BUTTONS];
unsigned long buttonPressTime[NUM_BUTTONS];
bool buttonPressState[NUM_BUTTONS];

bool upButtonPressed = false;
bool downButtonPressed = false;

const int PASSWORD_LENGTH = 6;  // Length of the password
const int PASSWORD_ADDRESS = 0; // EEPROM address to store the password

char password[PASSWORD_LENGTH + 1];  // Buffer to store the entered password
char originalPassword[PASSWORD_LENGTH + 1] = "123456"; // Initialize with a default password
char newPassword[PASSWORD_LENGTH + 1]; // Buffer to store the new password
int cursorPosition = 0;  // Current cursor position for modifying the password

unsigned long debounceDelay = 150;  // Debounce delay in milliseconds
unsigned long lastDebounceTime[4] = {0};

char digitArray[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
int currentDigitIndex = 0;  // Index of the current digit in the digit array

void parameterssave() {
  // Save the parameters to EEPROM
  // ...
  
  lcd.clear();
  lcd.print("Parameters Saved");
  delay(2000);
}

void readPasswordFromEEPROM() {
  // Read the password from EEPROM
  for (int i = 0; i < PASSWORD_LENGTH; i++) {
    originalPassword[i] = EEPROM.read(PASSWORD_ADDRESS + i);
  }
  originalPassword[PASSWORD_LENGTH] = '\0'; // Null-terminate the string
  
  // Print the original password to the serial monitor
  Serial.print("Original Password: ");
  Serial.println(originalPassword);
}

void savePasswordToEEPROM() {
  // Save the password to EEPROM
  for (int i = 0; i < PASSWORD_LENGTH; i++) {
    EEPROM.write(PASSWORD_ADDRESS + i, password[i]);
  }
  EEPROM.commit();  // Commit the changes to EEPROM
}

void buttonRead() {
  for (int i = 0; i < NUM_BUTTONS; i++) {
    bool currentState = digitalRead(BUTTON_PINS[i]);
    if (currentState != lastButtonState[i]) {
      buttonPressTime[i] = millis();
    }
    if (millis() - buttonPressTime[i] > debounceDelay) {
      buttonState[i] = currentState;
    }
    lastButtonState[i] = currentState;
  }
}

void setup() {
  Serial.begin(9600);
  
  lcd.begin(16, 2);  // Initialize the LCD
  lcd.print("Enter Password:");  // Display initial message

  for (int i = 0; i < NUM_BUTTONS; i++) {
    pinMode(BUTTON_PINS[i], INPUT_PULLDOWN);
    buttonState[i] = digitalRead(BUTTON_PINS[i]);
    lastButtonState[i] = buttonState[i];
    buttonPressTime[i] = 0;
  }

  // Read the original password from EEPROM
  readPasswordFromEEPROM();
}

void loop() {
  buttonRead();
  
Serial.print("buttonState[3]");
Serial.print(buttonState[3]);
  // Check if the back button is pressed
  if (buttonState[3] == HIGH && !buttonPressState[2]) {
    buttonPressState[3] = true;
    unsigned long buttonHoldTime = millis() - buttonPressTime[3];
    if (buttonHoldTime >= 2000) {
      // Compare the entered password with the original password
      if (strcmp(password, originalPassword) == 0) {
        lcd.clear();
        lcd.print("Change Password?");
        lcd.setCursor(0, 1);
        lcd.print("Yes  No");
        
        while (true) {
          buttonRead();
          if (buttonState[1] == HIGH) {
            buttonPressState[1] = true;
            break;
          } else if (buttonState[0] == HIGH) {
            buttonPressState[0] = true;
            break;
          }
        }
        
        if (buttonPressState[1]) {
          lcd.clear();
          lcd.print("Enter New Password:");
          cursorPosition = 0;  // Reset cursor position
          for (int i = 0; i < PASSWORD_LENGTH; i++) {
            newPassword[i] = '*';  // Fill the new password buffer with asterisks
          }
          
          while (true) {
            buttonRead();
            
            // Check if the select button is pressed
            if (buttonState[2] == HIGH && !buttonPressState[2]) {
              buttonPressState[2] = true;
              // Move the cursor to the next digit
              cursorPosition = (cursorPosition + 1) % PASSWORD_LENGTH;
              delay(200);
            } else if (buttonState[2] == LOW) {
              buttonPressState[2] = false;
            }
            
            // Check if the up button is pressed
            if (buttonState[1] == HIGH && !buttonPressState[1]) {
              buttonPressState[1] = true;
              // Increment the current digit index
              currentDigitIndex = (currentDigitIndex + 1) % 10;
              // Update the current digit of the new password
              newPassword[cursorPosition] = digitArray[currentDigitIndex];
              delay(200);
            } else if (buttonState[1] == LOW) {
              buttonPressState[1] = false;
            }
            
            // Check if the down button is pressed
            if (buttonState[0] == HIGH && !buttonPressState[0]) {
              buttonPressState[0] = true;
              // Decrement the current digit index
              currentDigitIndex = (currentDigitIndex + 9) % 10;
              // Update the current digit of the new password
              newPassword[cursorPosition] = digitArray[currentDigitIndex];
              delay(200);
            } else if (buttonState[0] == LOW) {
              buttonPressState[0] = false;
            }
            
            // Check if the back button is pressed
            if (buttonState[3] == HIGH && !buttonPressState[3]) {
              buttonPressState[3] = true;
              // Save the new password
              strncpy(originalPassword, newPassword, PASSWORD_LENGTH);
              savePasswordToEEPROM();
              break;
            } else if (buttonState[3] == LOW) {
              buttonPressState[3] = false;
            }
            
            // Display the new password on the LCD
            lcd.setCursor(0, 1);
            for (int i = 0; i < PASSWORD_LENGTH; i++) {
              if (i == cursorPosition) {
                lcd.print(newPassword[i]);
              } else {
                lcd.write('*');
              }
            }
          }
          
          lcd.clear();
          lcd.print("Password Changed");
          delay(2000);
          lcd.clear();
          lcd.print("Enter Password:");
          cursorPosition = 0;  // Reset cursor position
          for (int i = 0; i < PASSWORD_LENGTH; i++) {
            password[i] = '*';  // Fill the password buffer with asterisks
          }
        } else if (buttonPressState[0]) {
          lcd.clear();
          lcd.print("Password Not Changed");
          delay(2000);
          lcd.clear();
          lcd.print("Enter Password:");
          cursorPosition = 0;  // Reset cursor position
          for (int i = 0; i < PASSWORD_LENGTH; i++) {
            password[i] = '*';  // Fill the password buffer with asterisks
          }
        }
        
        // Reset button press states
        for (int i = 0; i < NUM_BUTTONS; i++) {
          buttonPressState[i] = false;
        }
      } else {
        lcd.clear();
        lcd.print("Incorrect Password");
        delay(2000);
        lcd.clear();
        lcd.print("Enter Password:");
        cursorPosition = 0;  // Reset cursor position
        for (int i = 0; i < PASSWORD_LENGTH; i++) {
          password[i] = '*';  // Fill the password buffer with asterisks
        }
      }
    }
  } else if (buttonState[3] == LOW) {
    buttonPressState[3] = false;
  }
  
  // Check if the up button is pressed
  if (buttonState[1] == HIGH && !buttonPressState[1]) {
    buttonPressState[1] = true;
    // Increment the current digit index
    currentDigitIndex = (currentDigitIndex + 1) % 10;
    // Update the current digit of the password
    password[cursorPosition] = digitArray[currentDigitIndex];
    delay(100);
  } else if (buttonState[1] == LOW) {
    buttonPressState[1] = false;
  }
  
  // Check if the down button is pressed
  if (buttonState[0] == HIGH && !buttonPressState[0]) {
    buttonPressState[0] = true;
    // Decrement the current digit index
    currentDigitIndex = (currentDigitIndex + 9) % 10;
    // Update the current digit of the password
    password[cursorPosition] = digitArray[currentDigitIndex];
    delay(100);
  } else if (buttonState[0] == LOW) {
    buttonPressState[0] = false;
  }
  
  // Check if the select button is pressed
  if (buttonState[2] == HIGH && !buttonPressState[2]) {
    buttonPressState[2] = true;
    // Move the cursor to the next digit
    cursorPosition = (cursorPosition + 1) % PASSWORD_LENGTH;
    delay(100);
  } else if (buttonState[2] == LOW) {
    buttonPressState[2] = false;
  }
  
  // Display the password on the LCD
  lcd.setCursor(0, 1);
  for (int i = 0; i < PASSWORD_LENGTH; i++) {
    if (i == cursorPosition) {
      lcd.write(password[i]);
    } else {
      lcd.write('*');
    }
  }

  delay(100);
}
