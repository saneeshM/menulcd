#include <LiquidCrystal.h>
#include <EEPROM.h>
const int rs = 5, en = 18, d4 = 19, d5 = 21, d6 =22, d7 = 23;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
int reading=0;
//Input & Button Logic
int MAN=0;
const int voltPin = 34;
const int numOfInputs = 4;
float voltage=210;
long setDelay=2000;

//LCD Menu Logic
const int numOfScreens = 5;
int currentScreen = 0;
int buttonValue = 0;

bool 
flagBtn0=0,
flagBtn1=0,
flagBtn2=0,
flagBtn3=0,
flagBtnSet=0,
flagBtnStore=0,
MANUAL=LOW,
 SET=LOW,
MENU=LOW,
 MENUFLAG=LOW,
 INCR=LOW,
 fastIncr=LOW,
veryFastIncr=LOW,
 DECR=LOW,
 fastDecr=LOW,
 veryFastDecr=LOW,
STORE=LOW,
 BACK=0;
float level =25.0;
int 
  
  longPressTime      = 2000,
  longPressInterval  = 4000;
 


const int inputPins[numOfInputs] = {32,25,33,35};
int inputState[numOfInputs];
float parameters[numOfScreens];
int lastInputState[numOfInputs] = {LOW,LOW,LOW,LOW};
bool inputFlags[numOfInputs] = {LOW,LOW,LOW,LOW};
long lastDebounceTime[numOfInputs] = {0,0,0,0};
long debounceDelay[numOfInputs] = {100,50,50,50};


float paraIncr1[]={0.1,0.1,0.1,0.1,0.1};
float paraIncr2[]={1,1,1,1,1};
float paraIncr3[]={3.0,3.0,3.0,3.0,3.0};
float paraMax[]={ 330, 45,15,600,40};
float paraMin[]={ 150.0, 0.0,0.0,0.0,0.0};
String screens[numOfScreens][2] = {{"LOW VOLT CUTOFF","VOLT"},{"LOW VOLT DELAY","SECS"}, {"DRY RUN TIME", "SEC"},{"MANUAL RUN TIME","MIN"}, 
{"START CAPACITOR","SECS"}};


void setup() {
EEPROM.begin(256); //Initializing EEPROM
	delay(10);
  Serial.begin(115200);

  for(int i = 0; i < numOfInputs; i++) {
    pinMode(inputPins[i], INPUT_PULLDOWN);
    
  }
  pinMode (voltPin,INPUT);
   lcd.begin(16, 2);  
 parameters[0] = EEPROM.read(140);
    delay(5);
 parameters[1] = EEPROM.read(150);
   delay(5);
parameters[2] = EEPROM.read(160);
parameters[3] = EEPROM.read(170);
parameters[4] = EEPROM.read(180);
}

void loop() {
 buttonRead() ;
  resolveInputFlags();
 printScreen();
  
    
}

void buttonRead() 
{
  /*////button1/////////////////////
  */
  if (digitalRead(inputPins[0]) ==HIGH)
  {

   if (flagBtn0==0){ lastDebounceTime[0] = millis(); flagBtn0=1;}}
  
  if ((millis() - lastDebounceTime[0]) > debounceDelay[0]) {
    if (digitalRead(inputPins[0]) ==HIGH){ INCR=1;}}

 if ((millis() - lastDebounceTime[0]) >  longPressTime) {
    if (digitalRead(inputPins[0]) ==HIGH){ INCR=1;  fastIncr=1;}}

    if ((millis() - lastDebounceTime[0]) >   longPressInterval) {
    if (digitalRead(inputPins[0]) ==HIGH){ INCR=1;  fastIncr=1;veryFastIncr=1;}}

/////button2//////////////////////
    if (digitalRead(inputPins[1]) ==HIGH)
  {
    if (flagBtn1==0){ lastDebounceTime[1] = millis(); flagBtn1=1;}
  }

  if ((millis() - lastDebounceTime[1]) > debounceDelay[1]) {
    if (digitalRead(inputPins[1]) ==HIGH){ DECR=1;}}

    if ((millis() - lastDebounceTime[1]) >  longPressTime) {
    if (digitalRead(inputPins[1]) ==HIGH){ DECR=1;  fastDecr=1;}}
    if ((millis() - lastDebounceTime[1]) >   longPressInterval) {
    if (digitalRead(inputPins[1]) ==HIGH){ DECR=1;  fastDecr=1;veryFastDecr=1;}}

    /////button3//////////////////////

 if (digitalRead(inputPins[2]) ==HIGH)
  {
    if (flagBtn2==0){ lastDebounceTime[2] = millis(); flagBtn2=1;}
  }
  if ((millis() - lastDebounceTime[2]) > debounceDelay[2]) {
    if (digitalRead(inputPins[2]) ==HIGH){ MENU=1;}}

        /////button4//////////////////////
if (digitalRead(inputPins[3]) ==HIGH)
  {
    if (flagBtn3==0){ lastDebounceTime[3] = millis(); flagBtn3=1;}
  }
  if ((millis() - lastDebounceTime[3]) > debounceDelay[3]) {
    if (digitalRead(inputPins[3]) ==HIGH){ BACK=1;}}
   
  
  ///BOTH BUTTON 1& 2 PRESSED TOGETHER/////
if (digitalRead(inputPins[0])==HIGH && digitalRead(inputPins[1])==HIGH)
{
  if (flagBtnSet==0) {lastDebounceTime[0] = millis(); flagBtnSet=1;}}

if (millis() - lastDebounceTime[0] >  longPressTime ) {
   if (digitalRead(inputPins[0])==HIGH && digitalRead(inputPins[1])==HIGH){ SET=1;}}
  ///BOTH BUTTON 2& 3 PRESSED TOGETHER/////
if (digitalRead(inputPins[2])==HIGH && digitalRead(inputPins[1])==HIGH)
{
 if (flagBtnStore==0) {lastDebounceTime[1] = millis(); flagBtnStore=1;}}

if (millis() - lastDebounceTime[1] >  longPressTime ) {
   if (digitalRead(inputPins[2])==HIGH && digitalRead(inputPins[1])==HIGH)
   { if (SET==1){ STORE=1;SAVEDATA();}}}

if (digitalRead(inputPins[0])==0){ flagBtn0=0;INCR=0;fastIncr=0;veryFastIncr=0;}
if (digitalRead(inputPins[1])==0){ flagBtn1=0;DECR=0;fastDecr=0;veryFastDecr=0;}
if (digitalRead(inputPins[2])==0){ flagBtn2=0;MENU=0;}
if (digitalRead(inputPins[3])==0){ flagBtn3=0;BACK=0;}
}


void resolveInputFlags() 
{

  
 
if(SET==1){

    if(MENU==1)
    {
            if (currentScreen == 0) {
              currentScreen = numOfScreens-1;
            }
            else
            {
              currentScreen--;
            }
        //    inputFlags[0]=LOW;
         // MENU=0;
  }

else if  (INCR==1 && fastIncr==0 )

{
  

    if( parameters[currentScreen]< paraMax[currentScreen] )
      {
      parameters[currentScreen] = (parameters[currentScreen])+ paraIncr1[currentScreen];
   
      } 
      
  }

else if (INCR==1 && fastIncr==1&&veryFastIncr==0 )

{
  

    if( parameters[currentScreen]< paraMax[currentScreen] )
      {
      parameters[currentScreen] = (parameters[currentScreen])+ paraIncr2[currentScreen];
  // INCR=0;fastIncr=0;
      } 



 }
else if (INCR==1 && fastIncr==1&&veryFastIncr==1 )

{
  

    if( parameters[currentScreen]< paraMax[currentScreen] )
      {
      parameters[currentScreen] = (parameters[currentScreen])+ paraIncr3[currentScreen];
  // INCR=0;fastIncr=0;
      } 



 }

else if (DECR==1 && fastDecr==0 &&veryFastDecr==0)

{
  

    if( parameters[currentScreen]> paraMin[currentScreen] )
      {
      parameters[currentScreen] = (parameters[currentScreen])-paraIncr1[currentScreen];
   
      } 
//INCR=0;fastIncr=0;

 }

 
  // DECR=0;

 else if (DECR==1 && fastDecr==1&&veryFastDecr==0 )


{


  if (parameters[currentScreen]> paraMin[currentScreen]) 

  {
   parameters[currentScreen]= parameters[currentScreen]-paraIncr2[currentScreen];
  
  } 
  // DECR=0;fastDecr=0;
}
 else if (DECR==1 && fastDecr==1&&veryFastDecr==1 )


{


  if (parameters[currentScreen]> paraMin[currentScreen]) 

  {
   parameters[currentScreen]= parameters[currentScreen]-paraIncr3[currentScreen];
  
  } 
  // DECR=0;fastDecr=0;
}

}
}

void SAVEDATA()
{
if (STORE==HIGH)
  {EEPROM.write(160,parameters[2]);
  delay(5);
   EEPROM.write(140,parameters[0]);
     delay(5);
   EEPROM.write(150,parameters[1]);
     delay(5);
     EEPROM.write(170,parameters[3]);
     delay(5);
     EEPROM.write(180,parameters[4]);
     delay(5);
   
  // parameters[2] = EEPROM.read(160);
   lcd.clear();
   lcd.print ("storing the data");
   delay(2000);
   lcd.clear();
   STORE=LOW;
   SET=LOW; 
 get_voltage(20);
  }
  }



float get_voltage(int n_samples)
{
  float voltage = 0;
  for(int i=0; i < n_samples; i++)
  {
    voltage += (analogRead(voltPin)) ;     
  }
  voltage = voltage/n_samples;
  if(voltage < 0){voltage = 0;}
  return(voltage);
   Serial.print("ac voltage");
  Serial.print(voltage);

  //Serial.print(sensorValue);
}



void printScreen() {
  if(SET==HIGH){
   lcd.setCursor(0,0);
 // lcd.clear();
  lcd.print(screens[currentScreen][0]);
  lcd.print("       ");
  lcd.setCursor(0,1);
  lcd.print(parameters[currentScreen]);
  lcd.print(" ");
  lcd.print(screens[currentScreen][1]);
   lcd.print("         ");}
   else
   {  
lcd.setCursor(0,0);
lcd.print( "AC VOLT:");
lcd.print( " ");
lcd.print(voltage);
  lcd.setCursor(0,1);
  lcd.print( "WATERLEVEL:");
  lcd.print( level);
  lcd.print( " %");
   }

}
